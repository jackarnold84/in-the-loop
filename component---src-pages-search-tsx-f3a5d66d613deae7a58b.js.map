{"version":3,"file":"component---src-pages-search-tsx-f3a5d66d613deae7a58b.js","mappings":"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","sources":["webpack://in-the-loop/./node_modules/fuse.js/dist/fuse.mjs","webpack://in-the-loop/./src/features/navigate/Search.tsx","webpack://in-the-loop/./src/pages/search.tsx","webpack://in-the-loop/./src/features/navigate/navigate.module.css","webpack://in-the-loop/./src/features/navigate/StationList.tsx","webpack://in-the-loop/./src/features/navigate/Placeholder.tsx"],"sourcesContent":["/**\n * Fuse.js v7.1.0 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2025 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? getTag(value) === '[object Array]'\n    : Array.isArray(value)\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number'\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value) {\n  return (\n    value === true ||\n    value === false ||\n    (isObjectLike(value) && getTag(value) == '[object Boolean]')\n  )\n}\n\nfunction isObject(value) {\n  return typeof value === 'object'\n}\n\n// Checks if `value` is object-like.\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\n// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value) {\n  return value == null\n    ? value === undefined\n      ? '[object Undefined]'\n      : '[object Null]'\n    : Object.prototype.toString.call(value)\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\n\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let obj = createKey(key);\n\n      this._keys.push(obj);\n      this._keyMap[obj.id] = obj;\n\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach((key) => {\n      key.weight /= totalWeight;\n    });\n  }\n  get(keyId) {\n    return this._keyMap[keyId]\n  }\n  keys() {\n    return this._keys\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n  let getFn = null;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'))\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n    getFn = key.getFn;\n  }\n\n  return { path, id, weight, src, getFn }\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.')\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!isDefined(obj)) {\n      return\n    }\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n      if (\n        index === path.length - 1 &&\n        (isString(value) || isNumber(value) || isBoolean(value))\n      ) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When `true`, the algorithm will ignore diacritics (accents) in comparisons\n  ignoreDiacritics: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false,\n  // The weight to determine how much field length norm effects scoring.\n  fieldNormWeight: 1\n};\n\nvar Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(weight = 1, mantissa = 3) {\n  const cache = new Map();\n  const m = Math.pow(10, mantissa);\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      // Default function is 1/sqrt(x), weight makes that variable\n      const norm = 1 / Math.pow(numTokens, 0.5 * weight);\n\n      // In place of `toFixed(mantissa)`, for faster computation\n      const n = parseFloat(Math.round(norm * m) / m);\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({\n    getFn = Config.getFn,\n    fieldNormWeight = Config.fieldNormWeight\n  } = {}) {\n    this.norm = norm(fieldNormWeight, 3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setIndexRecords();\n  }\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]]\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      let value = key.getFn ? key.getFn(doc) : this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          } else ;\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (isString(value) && !isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(\n  keys,\n  docs,\n  { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}\n) {\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(\n  data,\n  { getFn = Config.getFn, fieldNormWeight = Config.fieldNormWeight } = {}\n) {\n  const { keys, records } = data;\n  const myIndex = new FuseIndex({ getFn, fieldNormWeight });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex\n}\n\nfunction computeScore$1(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  const matchMask = computeMatches ? Array(textLen) : [];\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore$1(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen - 1);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore$1(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore$1(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore$1(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\n  }\n\n  return mask\n}\n\nconst stripDiacritics = String.prototype.normalize\n    ? ((str) => str.normalize('NFD').replace(/[\\u0300-\\u036F\\u0483-\\u0489\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u07FD\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08D3-\\u08E1\\u08E3-\\u0903\\u093A-\\u093C\\u093E-\\u094F\\u0951-\\u0957\\u0962\\u0963\\u0981-\\u0983\\u09BC\\u09BE-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CD\\u09D7\\u09E2\\u09E3\\u09FE\\u0A01-\\u0A03\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81-\\u0A83\\u0ABC\\u0ABE-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AE2\\u0AE3\\u0AFA-\\u0AFF\\u0B01-\\u0B03\\u0B3C\\u0B3E-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B62\\u0B63\\u0B82\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD7\\u0C00-\\u0C04\\u0C3E-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0C81-\\u0C83\\u0CBC\\u0CBE-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CE2\\u0CE3\\u0D00-\\u0D03\\u0D3B\\u0D3C\\u0D3E-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4D\\u0D57\\u0D62\\u0D63\\u0D82\\u0D83\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DF2\\u0DF3\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F3E\\u0F3F\\u0F71-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102B-\\u103E\\u1056-\\u1059\\u105E-\\u1060\\u1062-\\u1064\\u1067-\\u106D\\u1071-\\u1074\\u1082-\\u108D\\u108F\\u109A-\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4-\\u17D3\\u17DD\\u180B-\\u180D\\u1885\\u1886\\u18A9\\u1920-\\u192B\\u1930-\\u193B\\u1A17-\\u1A1B\\u1A55-\\u1A5E\\u1A60-\\u1A7C\\u1A7F\\u1AB0-\\u1ABE\\u1B00-\\u1B04\\u1B34-\\u1B44\\u1B6B-\\u1B73\\u1B80-\\u1B82\\u1BA1-\\u1BAD\\u1BE6-\\u1BF3\\u1C24-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE8\\u1CED\\u1CF2-\\u1CF4\\u1CF7-\\u1CF9\\u1DC0-\\u1DF9\\u1DFB-\\u1DFF\\u20D0-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302F\\u3099\\u309A\\uA66F-\\uA672\\uA674-\\uA67D\\uA69E\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA823-\\uA827\\uA880\\uA881\\uA8B4-\\uA8C5\\uA8E0-\\uA8F1\\uA8FF\\uA926-\\uA92D\\uA947-\\uA953\\uA980-\\uA983\\uA9B3-\\uA9C0\\uA9E5\\uAA29-\\uAA36\\uAA43\\uAA4C\\uAA4D\\uAA7B-\\uAA7D\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEB-\\uAAEF\\uAAF5\\uAAF6\\uABE3-\\uABEA\\uABEC\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE2F]/g, ''))\n    : ((str) => str);\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreDiacritics = Config.ignoreDiacritics,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreDiacritics,\n      ignoreLocation\n    };\n\n    pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    pattern = ignoreDiacritics ? stripDiacritics(pattern) : pattern;\n    this.pattern = pattern;\n\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, ignoreDiacritics, includeMatches } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n    text = ignoreDiacritics ? stripDiacritics(text) : text;\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: 'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'exact'\n  }\n  static get multiRegex() {\n    return /^=\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^=(.*)$/\n  }\n  search(text) {\n    const isMatch = text === this.pattern;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'prefix-exact'\n  }\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-prefix-exact'\n  }\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'suffix-exact'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-suffix-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreDiacritics = Config.ignoreDiacritics,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreDiacritics,\n      ignoreLocation\n    });\n  }\n  static get type() {\n    return 'fuzzy'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// Token: 'file\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'include'\n  }\n  static get multiRegex() {\n    return /^'\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices\n    }\n  }\n}\n\n// ❗Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  IncludeMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreDiacritics = Config.ignoreDiacritics,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      ignoreLocation = Config.ignoreLocation,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      ignoreDiacritics,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      ignoreLocation,\n      location,\n      threshold,\n      distance\n    };\n\n    pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    pattern = ignoreDiacritics ? stripDiacritics(pattern) : pattern;\n    this.pattern = pattern;\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive, ignoreDiacritics } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n    text = ignoreDiacritics ? stripDiacritics(text) : text;\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = (query) => !!query[KeyType.PATH];\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\n// Practical scoring function\nfunction computeScore(\n  results,\n  { ignoreFieldNorm = Config.ignoreFieldNorm }\n) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = key ? key.weight : null;\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn,\n        fieldNormWeight: this.options.fieldNormWeight\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = (/* doc, idx */) => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        len -= 1;\n\n        results.push(doc);\n      }\n    }\n\n    return results\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore(results, { ignoreFieldNorm });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const { keyId, searcher } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [\n            {\n              idx,\n              item,\n              matches\n            }\n          ]\n        }\n\n        return []\n      }\n\n      const res = [];\n      for (let i = 0, len = node.children.length; i < len; i += 1) {\n        const child = node.children[i];\n        const result = evaluate(child, item, idx);\n        if (result.length) {\n          res.push(...result);\n        } else if (node.operator === LogicalOperator.AND) {\n          return []\n        }\n      }\n      return res\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          expResults.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\nFuse.version = '7.1.0';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\nexport { Fuse as default };\n","import { Input } from 'antd';\nimport Fuse from \"fuse.js\";\nimport React from 'react';\nimport { LuSearch, LuSearchX } from 'react-icons/lu';\nimport Container from '../../components/Container';\nimport { stationIndex } from '../../config/index';\nimport { useAppContext } from '../layout/AppContext';\nimport Placeholder from './Placeholder';\nimport StationList from './StationList';\n\nconst Search = () => {\n  const {\n    search: {\n      searchValue, setSearchValue,\n      searchResults, setSearchResults,\n    },\n  } = useAppContext();\n\n  const data = Object.entries(stationIndex).map(([key, value]) => ({\n    id: key,\n    name: value.name,\n  }));\n  const fuse = new Fuse(data, { keys: [\"name\"], threshold: 0.3 });\n\n  const onSearch = (value: string) => {\n    setSearchValue(value);\n    const result = fuse.search(value).slice(0, 15);\n    setSearchResults(result.map((item) => item.item.id));\n  };\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onSearch(event.target.value);\n  };\n\n  return (\n    <Container width={500}>\n      <Container>\n        <Input.Search\n          placeholder=\"Search for stops\"\n          value={searchValue}\n          size=\"large\"\n          allowClear autoFocus\n          onSearch={onSearch} onChange={onChange}\n        />\n      </Container>\n\n      <Container size={16}>\n        {searchValue === \"\" ? (\n          <Placeholder description=\"Search for stops by name\" icon={<LuSearch />} />\n        ) : searchResults.length === 0 ? (\n          <Placeholder description={`No stops found for \"${searchValue}\"`} icon={<LuSearchX />} />\n        ) : (\n          <StationList stationIds={searchResults} />\n        )}\n      </Container>\n    </Container>\n  );\n};\n\nexport default Search;\n","import React from 'react';\nimport Layout from '../features/layout/Layout';\nimport Search from '../features/navigate/Search';\n\nconst SearchPage = () => {\n  return (\n    <Layout>\n      <Search />\n    </Layout>\n  )\n};\n\nexport default SearchPage\n\nexport const Head = () => <title>In The Loop - Search</title>\n","// extracted by mini-css-extract-plugin\nexport var iconFlexHolder = \"navigate-module--iconFlexHolder--9d38a\";\nexport var iconHolder = \"navigate-module--iconHolder--370ce\";\nexport var iconTextWrapper = \"navigate-module--iconTextWrapper--ac559\";\nexport var rowLink = \"navigate-module--rowLink--d4cee\";\nexport var semiBold = \"navigate-module--semiBold--c8e9e\";\nexport var slimRow = \"navigate-module--slimRow--e1a84\";","import React from 'react';\nimport Link from '../../components/Link';\nimport TransitIcon from '../../components/TransitIcon';\nimport { stationIndex, trackIndex } from '../../config/index';\nimport * as styles from \"./navigate.module.css\";\n\ntype StationListProps = {\n  stationIds: string[];\n};\n\nconst StationList: React.FC<StationListProps> = ({ stationIds }) => {\n  return (\n    <>\n      {stationIds.map((stationId) => {\n        const station = stationIndex[stationId];\n        const tracks = Object.values(station.stops)\n          .flat()\n          .map((stopId) => trackIndex[stopId]);\n        const type = tracks[0].type as 'train' | 'bus';\n        const routes = Array.from(new Set(tracks.map((track) => track.route)));\n\n        return (\n          <Link\n            to={`/station/${stationId}`}\n            key={stationId}\n            className={`${styles.rowLink} ${styles.slimRow}`}\n          >\n            <div>{station.name}</div>\n            <div className={styles.iconFlexHolder}>\n              {routes.map(route => (\n                <TransitIcon key={route} type={type} route={route} />\n              ))}\n            </div>\n          </Link>\n        )\n      })}\n    </>\n  );\n};\n\nexport default StationList\n","import { Empty } from 'antd';\nimport React, { ReactElement } from 'react';\n\nconst lightGrey = \"#d9d9d9\";\n\ninterface PlaceholderProps {\n  description: string;\n  icon: ReactElement<{ color?: string; size?: number }>;\n}\n\nconst Placeholder: React.FC<PlaceholderProps> = ({ description, icon }) => {\n  const styledIcon = React.cloneElement(icon, {\n    color: lightGrey,\n    size: 84,\n  });\n\n  return (\n    <Empty\n      description={description}\n      image={styledIcon}\n    />\n  );\n};\n\nexport default Placeholder;\n"],"names":["isArray","value","Array","getTag","isString","isNumber","isBoolean","isObject","isObjectLike","isDefined","isBlank","trim","length","undefined","Object","prototype","toString","call","hasOwn","hasOwnProperty","KeyStore","constructor","keys","this","_keys","_keyMap","totalWeight","forEach","key","obj","createKey","push","id","weight","get","keyId","toJSON","JSON","stringify","path","src","getFn","createKeyPath","createKeyId","Error","name","MISSING_KEY_PROPERTY","INVALID_KEY_WEIGHT_VALUE","split","join","AdvancedOptions","useExtendedSearch","list","arr","deepGet","index","result","baseToString","i","len","ignoreLocation","ignoreFieldNorm","fieldNormWeight","Config","isCaseSensitive","ignoreDiacritics","includeScore","shouldSort","sortFn","a","b","score","idx","includeMatches","findAllMatches","minMatchCharLength","location","threshold","distance","SPACE","FuseIndex","norm","mantissa","cache","Map","m","Math","pow","numTokens","match","has","n","parseFloat","round","set","clear","isCreated","setIndexRecords","setSources","docs","records","setKeys","_keysMap","create","doc","docIndex","_addString","_addObject","add","size","removeAt","splice","getValueForItemAtKeyId","item","record","v","$","keyIndex","subRecords","stack","nestedArrIndex","pop","subRecord","k","createIndex","myIndex","map","computeScore$1","pattern","errors","currentLocation","expectedLocation","accuracy","proximity","abs","MAX_BITS","search","text","patternAlphabet","patternLen","textLen","max","min","currentThreshold","bestLocation","computeMatches","matchMask","indexOf","lastBitArr","finalScore","binMax","mask","binMin","binMid","floor","start","finish","bitArr","j","charMatch","charAt","isMatch","indices","matchmask","end","convertMaskToIndices","createPatternAlphabet","char","stripDiacritics","String","normalize","str","replace","BitapSearch","options","toLowerCase","chunks","addChunk","startIndex","alphabet","remainder","substr","searchIn","allIndices","totalScore","hasMatches","BaseMatch","isMultiMatch","getMatch","multiRegex","isSingleMatch","singleRegex","exp","matches","FuzzyMatch","super","_bitapSearch","type","IncludeMatch","searchers","startsWith","endsWith","searchersLen","SPACE_RE","MultiMatchSet","Set","ExtendedSearch","query","filter","results","queryItem","found","searcher","token","parseQuery","condition","_","numMatches","qLen","pLen","registeredSearchers","createSearcher","searcherClass","LogicalOperator","KeyType","isExpression","convertToExplicit","parse","auto","next","isQueryPath","isPath","isLeaf","LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY","node","children","operator","transformMatches","data","refIndex","transformScore","Fuse","_keyStore","setCollection","_docs","_myIndex","remove","predicate","getIndex","limit","_searchStringList","_searchObjectList","_searchLogical","Number","EPSILON","computeScore","sort","slice","transformers","transformer","format","expression","evaluate","_findMatches","res","child","resultMap","expResults","version","parseIndex","config","args","register","Search","searchValue","setSearchValue","searchResults","setSearchResults","useAppContext","entries","stationIndex","_ref","fuse","onSearch","React","Container","width","placeholder","allowClear","autoFocus","onChange","event","target","Placeholder","description","icon","LuSearch","LuSearchX","StationList","stationIds","SearchPage","Layout","Head","iconFlexHolder","iconHolder","iconTextWrapper","rowLink","slimRow","stationId","station","tracks","values","stops","flat","stopId","trackIndex","routes","from","track","route","Link","to","className","styles","TransitIcon","styledIcon","color","image"],"sourceRoot":""}