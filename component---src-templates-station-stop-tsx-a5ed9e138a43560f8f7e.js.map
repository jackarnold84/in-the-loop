{"version":3,"file":"component---src-templates-station-stop-tsx-a5ed9e138a43560f8f7e.js","mappings":"8MAWA,MAAMA,EAAoBC,IACxB,GAAuB,QAAnBA,EAAO,GAAGC,KAAgB,CAE5B,MAAO,GADkBC,MAAMC,KAAK,IAAIC,IAAIJ,EAAOK,KAAIC,GAASA,EAAMC,cAC3CC,KAAK,YAClC,CAAO,CACL,MAAMC,EAAkBP,MAAMC,KAC5B,IAAIC,IAAIJ,EAAOU,SAAQJ,GAASA,EAAMK,aACtCC,MAAK,CAACC,EAAGC,IAAMD,EAAEE,OAASD,EAAEC,SAC9B,MAAO,GAAGN,EAAgBO,MAAM,EAAG,GAAGR,KAAK,QAAQC,EAAgBM,OAAS,EAAI,QAAU,IAC5F,GAoCF,UAjC6BE,IAAmD,IAAlD,YAAEC,GAA2C,EACzE,MAAMC,EAAYD,EAAYC,UACxBC,EAAUC,EAAAA,EAAaF,GACvBG,EAASJ,EAAYI,OAErBtB,EADcoB,EAAQG,MAAMD,GACPjB,KAAImB,GAAWC,EAAAA,EAAWD,KAE/CE,EAAa,CACjBC,YAAa3B,EAAO,GAAGC,KACvB2B,OAAQ5B,EAAOK,KAAIC,GAASA,EAAMuB,QAClCP,OAAQtB,EAAO,GAAG8B,MAEdF,EAAS5B,EAAOK,KAAIC,IAAS,CACjCyB,GAAIzB,EAAMuB,MACVG,KAAoB,OAAd1B,EAAML,KAAgB,GAAGK,EAAMuB,WAAWvB,EAAM2B,YAAc3B,EAAM2B,cAEtEC,EAAehC,MAAMC,KACzB,IAAIgC,IAAIP,EAAOvB,KAAI+B,GAAQ,CAACA,EAAKL,GAAIK,MAAQC,UAG/C,OACEC,EAAAA,cAACC,EAAAA,EAAM,KACLD,EAAAA,cAACE,EAAAA,EAAU,CAACC,MAAO,CAAC,CAAEC,GAAI,YAAYvB,IAAawB,KAAM,kBACzDL,EAAAA,cAACM,EAAAA,EAAQ,CACP5C,OAAQ,CAAC0B,GACTmB,MAAOzB,EAAQY,KACfc,SAAU/C,EAAiBC,GAC3B+C,YAAab,IAER,EAMN,MAAMc,EAAOA,IAAMV,EAAAA,cAAAA,QAAAA,KAAO,c","sources":["webpack://in-the-loop/./src/templates/stationStop.tsx"],"sourcesContent":["import * as React from \"react\";\nimport BackButton from \"../components/BackButton\";\nimport { stationIndex, Track, trackIndex } from \"../config/index\";\nimport Layout from \"../features/layout/Layout\";\nimport Arrivals from \"../features/track/Arrivals\";\n\ntype PageContext = {\n  stationId: string;\n  stopId: string;\n};\n\nconst getDirectionText = (tracks: Track[]) => {\n  if (tracks[0].type === \"bus\") {\n    const uniqueDirections = Array.from(new Set(tracks.map(track => track.direction)));\n    return `${uniqueDirections.join(\", \")}bound`;\n  } else {\n    const uniqueHeadsigns = Array.from(\n      new Set(tracks.flatMap(track => track.headsign))\n    ).sort((a, b) => a.length - b.length);\n    return `${uniqueHeadsigns.slice(0, 3).join(\", \")}${uniqueHeadsigns.length > 3 ? \", ...\" : \"\"}`;\n  }\n}\n\nconst StationStopTrackPage = ({ pageContext }: { pageContext: PageContext }) => {\n  const stationId = pageContext.stationId;\n  const station = stationIndex[stationId];\n  const stopId = pageContext.stopId;\n  const trackIdList = station.stops[stopId];\n  const tracks = trackIdList.map(trackId => trackIndex[trackId]);\n\n  const trackInput = {\n    transitType: tracks[0].type as 'train' | 'bus',\n    routes: tracks.map(track => track.route),\n    stopId: tracks[0].stop,\n  }\n  const routes = tracks.map(track => ({\n    id: track.route,\n    name: track.type == \"bus\" ? `${track.route} - ${track.routeName}` : track.routeName,\n  }));\n  const uniqueRoutes = Array.from(\n    new Map(routes.map(item => [item.id, item])).values()\n  );\n\n  return (\n    <Layout>\n      <BackButton paths={[{ to: `/station/${stationId}`, text: \"Select Stop\" }]} />\n      <Arrivals\n        tracks={[trackInput]}\n        title={station.name}\n        subtitle={getDirectionText(tracks)}\n        routeFilter={uniqueRoutes}\n      />\n    </Layout>\n  );\n};\n\nexport default StationStopTrackPage;\n\nexport const Head = () => <title>In The Loop</title>\n"],"names":["getDirectionText","tracks","type","Array","from","Set","map","track","direction","join","uniqueHeadsigns","flatMap","headsign","sort","a","b","length","slice","_ref","pageContext","stationId","station","stationIndex","stopId","stops","trackId","trackIndex","trackInput","transitType","routes","route","stop","id","name","routeName","uniqueRoutes","Map","item","values","React","Layout","BackButton","paths","to","text","Arrivals","title","subtitle","routeFilter","Head"],"sourceRoot":""}